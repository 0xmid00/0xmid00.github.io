<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Checklist - Local Windows Privilege Escalation on</title><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/</link><description>Recent content in Checklist - Local Windows Privilege Escalation on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/AlwaysInstallElevated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/AlwaysInstallElevated/</guid><description>MSI files are package files used to install applications.
These files run with the permissions of the user trying to install
them. Windows allows for these installers to be run with elevated (i.e. admin) privileges. If this is the case, we can generate a malicious MSI file which contains a reverse shell.
If these 2 registers are enabled (value is 0x1), then users of any privilege can install (execute) *.msi files as NT AUTHORITY*SYSTEM*.</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Insecure-Service-Properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Insecure-Service-Properties/</guid><description>Each service has an ACL which defines certain service-specific
permissions.
Some permissions are innocuous (e.g. SERVICE_QUERY_CONFIG,
SERVICE_QUERY_STATUS).
Some may be useful (e.g. SERVICE_STOP, SERVICE_START).
Some are dangerous (e.g. SERVICE_CHANGE_CONFIG,
SERVICE_ALL_ACCESS)
If our user has permission to change the configuration of a
service which runs with SYSTEM privileges, we can change
the executable the service uses to one of our own.
Potential Rabbit Hole: If you can change a service
configuration but cannot stop/start the service, you may not</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Kernel-Exploits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Kernel-Exploits/</guid><description>System Info # Version info enumeration # Check if the Windows version has any known vulnerability (check also the patches applied).
systeminfo systeminfo &amp;gt; systeminfo.txt #Run wesng to find potential exploits: python wes.py systeminfo.txt -i &amp;#39;Elevation of Privilege&amp;#39; --exploits-only | less systeminfo | findstr /B /C:&amp;#34;OS Name&amp;#34; /C:&amp;#34;OS Version&amp;#34; #Get only that information wmic qfe get Caption,Description,HotFixID,InstalledOn #Patches wmic os get osarchitecture || echo %PROCESSOR_ARCHITECTURE% #Get system architecture [System.</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/PATH-DLL-Hijacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/PATH-DLL-Hijacking/</guid><description>If you have write permissions inside a folder present on PATH you could be able to hijack a DLL loaded by a process and escalate privileges.
1.Use winPEAS to enumerate non-Windows services:
.\winPEASany.exe quiet servicesinfo
2.Note that the C:\Temp directory is writable and in the PATH. Start by enumerating which of these services our user has stop and start access to:
[+] Checking write permissions in PATH folders (DLL Hijacking)()</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Run-at-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Run-at-startup/</guid><description>Windows can be configured to run commands at startup,
with elevated privileges.
These “AutoRuns” are configured in the Registry.
If you are able to write to an AutoRun executable, and are
able to restart the system (or wait for it to be restarted) you
may be able to escalate privileges.
1.Use winPEAS to check for writable AutoRun executables:
.\winPEASany.exe quiet applicationsinfo
[?] Check if you can modify other users AutoRuns binaries</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Searching-the-Registry-for-Passwords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Searching-the-Registry-for-Passwords/</guid><description>The following commands will search the registry for keys and
values that contain “password”
REG QUERY HKLM /F &amp;#34;password&amp;#34; /t REG_SZ /S /K REG QUERY HKCU /F &amp;#34;password&amp;#34; /t REG_SZ /S /K REG QUERY HKLM /F &amp;#34;password&amp;#34; /t REG_SZ /S /d REG QUERY HKCU /F &amp;#34;password&amp;#34; /t REG_SZ /S /d This usually generates a lot of results, so often it is more fruitful to look in known locations.
1.Use winPEAS to check common password locations:</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Services-binaries-weak-permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Services-binaries-weak-permissions/</guid><description>If the original service executable is modifiable by our
user, we can simply replace it with our reverse shell
executable.
Remember to create a backup of the original executable
if you are exploiting this in a real system!
1.Run winPEAS to check for service misconfigurations:
.\winPEASany.exe quiet servicesinfo
2.Note that the “filepermsvc” service has an executable which appears to be writable by everyone. We can confirm this with accesschk.exe:</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Services-registry-modify-permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Services-registry-modify-permissions/</guid><description>The Windows registry stores entries for each service.
Since registry entries can have ACLs, if the ACL is
misconfigured, it may be possible to modify a service’s
configuration even if we cannot modify the service
directly.
1.Run winPEAS to check for service misconfigurations:
.\winPEASany.exe quiet servicesinfo
2.Note that the “regsvc” service has a weak registry entry. We can confirm this with PowerShell:
[+] Looking if you can modify any service registry()</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Unquoted-Service-Paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Unquoted-Service-Paths/</guid><description>If the path to an executable is not inside quotes, Windows will try to execute every ending before a space.
For example, for the path C:\Program Files\Some Folder\Service.exe Windows will try to execute:
C:\Program.exe C:\Program Files\Some.exe C:\Program Files\Some Folder\Service.exe 1.Run winPEAS to check for service misconfigurations:
.\winPEASany.exe quiet servicesinfo
Note that the “unquotedsvc” service has an unquoted path that
also contains spaces:
C:\Program Files\Unquoted Path Service\Common Files\unquotedpathservice.exe
No quotes and Space detected</description></item><item><title/><link>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Untitled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://amethyst.bencuan.me/Windows/Windows-Privilege-Escalation/Untitled/</guid><description/></item></channel></rss>